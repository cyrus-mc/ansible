# Flow
# 
# 1 - check if already ran
#
# 1 - attempt to download file from S3 (ignore errors: True)
# 2 - stat file, register variable
# 1 - check if file exists
#

# trigger file used to check whether we have bootstrapped before
- stat:
    path: /root/.etcd_bootstrap
  register: etcd_bootstrap

# if we have bootstrapped before, exit
- assert:
    that:
     - etcd_bootstrap.stat.exists == false
    msg: 'etcd bootstrap has already run, exiting to prevent corruption of etcd cluster'

# ensure etcd2 is stopped (as it usually starts automatically on CoreOS)
- name: etcd2 stop
  systemd:
    name: etcd2
    state: stopped

# if we get this far, assume rest will be successfully
- name: touch /root/.etcd.bootstrap
  file:
    path: /root/.etcd_bootstrap
    state: touch

- name: Systemd Drop-In Directory
  file:
    path: /etc/systemd/system/etcd2.service.d
    state: directory
    mode: 0755

- name: S3 download backup (if it exists)
  ignore_errors: True
  s3:
    bucket: smarsh-k8s-dev
    object: /backup.tar.gz
    dest: /tmp/etcd-backup.tar.gz
    mode: get

- stat:
    path: /tmp/etcd-backup.tar.gz
  register: etcd_backup

  #- debug:
  #  msg: "Backup exists"
  #when: etcd_backup.stat.exists == True

- name: 20-ansibleinit.conf
  template:
    src: 20-ansibleinit.conf.j2
    dest: /etc/systemd/system/etcd2.service.d/20-ansibleinit.conf
    mode: 0644
  notify:
  - etcd_systemd
  when: etcd_backup.stat.exists == False

- name: copy etcd-recovery.sh
  copy:
    src: etcd-recovery.sh
    dest: /root/etcd-recovery.sh
    mode: 0700
  when: etcd_backup.stat.exists == True

- name: run etcd-recovery.sh
  shell: ./etcd-recovery.sh {{ ansible_local.k8s_facts.hostname }} {{ ansible_eth0.ipv4.address }}
  args:
    chdir: /root
    executable: /bin/bash
  when: etcd_backup.stat.exists == True

- name: start etcd2
  systemd:
    name: etcd2
    enabled: yes
    state: started
    daemon_reload: yes
